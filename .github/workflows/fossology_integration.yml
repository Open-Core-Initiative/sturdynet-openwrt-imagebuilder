name: Fossolgy Scanner

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["test"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: sudo apt-get update && sudo apt-get install zip -y && sudo apt-get install jq -y
      - run: zip -r ${GITHUB_REF##*/}.zip . -x '*.git*'
      - name: MANAGING ZIP FILE PERMISSIONS
        run: chmod 777 ${GITHUB_REF##*/}.zip && ls -l
      - run: echo "TOKEN_EXPIRY_DATE=$(date -d '+1 day' '+%Y-%m-%d')" >> $GITHUB_ENV
      - run: echo "TOKEN_NAME=${GITHUB_REF##*/}-$(date '+%H%M%d%m%Y%S')" >> $GITHUB_ENV # Token name should not exceed 40 characters.
      - run: echo "UPLOAD_FILE_PATH=${GITHUB_WORKSPACE}/${GITHUB_REF##*/}.zip" >> $GITHUB_ENV
      - name: LOGIN TO FOSSOLOGY
        run: |
          FOSSY_LOGIN_RESPONSE=$( \
          curl --request POST \
          --location '${{ secrets.FOSSY_BASE_URL }}/api/v1/tokens' \
          --header 'Content-Type:application/json' \
          --data '{"username":"${{ secrets.FOSSY_USERNAME }}","password":"${{ secrets.FOSSY_USERNAME }}","token_name":"${{ env.TOKEN_NAME }}","token_scope":"write","token_expire":"${{ env.TOKEN_EXPIRY_DATE }}"}' \
          )
          echo ::add-mask::$FOSSY_LOGIN_RESPONSE
          echo FOSSY_LOGIN_RESPONSE="$FOSSY_LOGIN_RESPONSE" >> $GITHUB_ENV
      - name: GETTING FOSSOLOGY BEARER TOKEN
        run: |
          FOSSY_BEARER_TOKEN=$( \
          echo $FOSSY_LOGIN_RESPONSE | jq -r '.Authorization' \
          )
          echo ::add-mask::$FOSSY_BEARER_TOKEN
          echo FOSSY_BEARER_TOKEN="$FOSSY_BEARER_TOKEN" >> $GITHUB_ENV
      - run: echo "FILE_DESCRIPTION=Repository name:${GITHUB_REPOSITORY#*/}, Branch:${GITHUB_REF##*/}, Date:$(date '+%H:%M %d/%m/%Y')" >> $GITHUB_ENV
      - name: UPLOADING ZIP FILE TO FOSSOLOGY
        run: |
          FOSSY_UPLOAD_RESPONSE=$( \
          curl -v --location '${{ secrets.FOSSY_BASE_URL }}/api/v1/uploads' \
          --header 'Authorization: ${{ env.FOSSY_BEARER_TOKEN }}' \
          --header 'folderId: 1' \
          --header 'uploadDescription: ${{ env.FILE_DESCRIPTION }}' \
          --header 'uploadType: file' \
          --header 'public: public' \
          --form 'fileInput=@"${{ env.UPLOAD_FILE_PATH }}"' \
          )
          echo FOSSY_UPLOAD_RESPONSE="$FOSSY_UPLOAD_RESPONSE" >> $GITHUB_ENV
      - name: GETTING FOSSOLOGY UPLOAD ID
        run: |
          FOSSY_UPLOAD_ID=$( \
          echo $FOSSY_UPLOAD_RESPONSE | jq -r '.message' \
          )
          echo FOSSY_UPLOAD_ID="$FOSSY_UPLOAD_ID" >> $GITHUB_ENV
      - name: CHECKING FOR UPLOAD STATUS
        run: |
          while true; do
            response_json=$( \
            curl --location '${{ secrets.FOSSY_BASE_URL }}/api/v1/jobs?upload=${{ env.FOSSY_UPLOAD_ID }}' \
            --header 'Authorization: ${{ env.FOSSY_BEARER_TOKEN }}' \
            )

            actual_status=$( \
            echo "$response_json" | jq -r '.[].status' \
            )
            if [[ "$actual_status" = "Completed" ]] ; then
              echo "Desired status received: $actual_status"
              break
            else
              echo "Status is $actual_status. Retrying..."
              sleep 5  # Wait for 5 seconds before the next iteration
            fi
          done
